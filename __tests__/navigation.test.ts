/**
 * Comprehensive tests for all routing strategies
 * Tests the implementation from todo_routing_solution_20250812.md
 */

import { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';
import { renderHook, act } from '@testing-library/react-hooks';
import { 
  useNavigation, 
  useSimpleNavigation, 
  useRouterDetection,
  detectNavigationStrategy 
} from '../hooks/useNavigation';
import { 
  buildUrlPath, 
  isPathActive, 
  autoDetectNavigationConfig,
  routingLibraryDetection 
} from '../utils/routing';
import { NavigationConfig, SidebarNavigationItem } from '../types/navigation';

// Mock external dependencies
jest.mock('react-router-dom', () => ({
  useNavigate: jest.fn(),
  useLocation: jest.fn(() => ({ pathname: '/' })),
}));

jest.mock('next/router', () => ({
  useRouter: jest.fn(),
}));

// Test data
const mockNavigationItems: SidebarNavigationItem[] = [
  {
    id: 'dashboard',
    name: 'Dashboard',
    path: '/dashboard',
    section: 'main',
  },
  {
    id: 'settings',
    name: 'Settings',
    path: '/settings',
    section: 'main',
    requiresRole: ['admin'],
  },
  {
    id: 'profile',
    name: 'Profile',
    path: '/profile',
    section: 'footer',
  },
  {
    id: 'external',
    name: 'External Link',
    path: 'https://example.com',
    section: 'main',
  },
];\n\ndescribe('Navigation Routing System', () => {\n  beforeEach(() => {\n    // Reset window object\n    delete (window as any).__REACT_ROUTER__;\n    delete (window as any).next;\n    delete (window as any).__NEXT_DATA__;\n    \n    // Mock window.location\n    Object.defineProperty(window, 'location', {\n      value: {\n        href: 'http://localhost:3000/',\n        pathname: '/',\n        search: '',\n        hash: '',\n      },\n      writable: true,\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('detectNavigationStrategy', () => {\n    it('should detect Next.js router', () => {\n      (window as any).__NEXT_DATA__ = {};\n      expect(detectNavigationStrategy()).toBe('next');\n    });\n\n    it('should detect React Router', () => {\n      (window as any).__REACT_ROUTER__ = true;\n      expect(detectNavigationStrategy()).toBe('react-router');\n    });\n\n    it('should fallback to href for unknown environments', () => {\n      expect(detectNavigationStrategy()).toBe('href');\n    });\n\n    it('should return href for SSR environments', () => {\n      const originalWindow = global.window;\n      delete (global as any).window;\n      \n      expect(detectNavigationStrategy()).toBe('href');\n      \n      global.window = originalWindow;\n    });\n  });\n\n  describe('buildUrlPath', () => {\n    it('should return path without baseUrl', () => {\n      expect(buildUrlPath('/dashboard')).toBe('/dashboard');\n    });\n\n    it('should combine baseUrl and path', () => {\n      expect(buildUrlPath('/dashboard', '/myapp')).toBe('/myapp/dashboard');\n    });\n\n    it('should handle absolute URLs', () => {\n      expect(buildUrlPath('https://example.com', '/myapp')).toBe('https://example.com');\n    });\n\n    it('should not double-add baseUrl', () => {\n      expect(buildUrlPath('/myapp/dashboard', '/myapp')).toBe('/myapp/dashboard');\n    });\n\n    it('should handle paths without leading slash', () => {\n      expect(buildUrlPath('dashboard', '/myapp')).toBe('/myapp/dashboard');\n    });\n  });\n\n  describe('isPathActive', () => {\n    it('should match exact paths', () => {\n      expect(isPathActive('/dashboard', '/dashboard')).toBe(true);\n      expect(isPathActive('/settings', '/dashboard')).toBe(false);\n    });\n\n    it('should match nested paths', () => {\n      expect(isPathActive('/dashboard/analytics', '/dashboard')).toBe(true);\n      expect(isPathActive('/dashboard', '/dashboard/analytics')).toBe(false);\n    });\n\n    it('should handle baseUrl correctly', () => {\n      expect(isPathActive('/myapp/dashboard', '/dashboard', '/myapp')).toBe(true);\n      expect(isPathActive('/myapp/dashboard/view', '/dashboard', '/myapp')).toBe(true);\n    });\n\n    it('should not match root path for all paths', () => {\n      expect(isPathActive('/dashboard', '/')).toBe(false);\n      expect(isPathActive('/', '/')).toBe(true);\n    });\n  });\n\n  describe('routingLibraryDetection', () => {\n    it('should detect React Router presence', () => {\n      (window as any).__REACT_ROUTER__ = true;\n      expect(routingLibraryDetection.hasReactRouter()).toBe(true);\n      \n      delete (window as any).__REACT_ROUTER__;\n      expect(routingLibraryDetection.hasReactRouter()).toBe(false);\n    });\n\n    it('should detect Next.js router presence', () => {\n      (window as any).__NEXT_DATA__ = {};\n      expect(routingLibraryDetection.hasNextRouter()).toBe(true);\n      \n      delete (window as any).__NEXT_DATA__;\n      expect(routingLibraryDetection.hasNextRouter()).toBe(false);\n    });\n\n    it('should get router info', () => {\n      (window as any).__NEXT_DATA__ = { buildId: 'test' };\n      const info = routingLibraryDetection.getRouterInfo();\n      expect(info.type).toBe('next');\n      expect(info.version).toBe('app-router');\n    });\n  });\n\n  describe('useNavigation hook', () => {\n    const mockConfig: NavigationConfig = {\n      strategy: 'href',\n      items: mockNavigationItems,\n    };\n\n    it('should initialize with correct configuration', () => {\n      const { result } = renderHook(() => useNavigation(mockConfig));\n      \n      expect(result.current.strategy).toBe('href');\n      expect(typeof result.current.navigate).toBe('function');\n      expect(typeof result.current.isActive).toBe('function');\n    });\n\n    it('should handle href navigation strategy', () => {\n      const mockHref = jest.fn();\n      Object.defineProperty(window.location, 'href', {\n        set: mockHref,\n      });\n\n      const { result } = renderHook(() => useNavigation(mockConfig));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0]);\n      });\n\n      expect(mockHref).toHaveBeenCalledWith('/dashboard');\n    });\n\n    it('should detect active navigation items', () => {\n      Object.defineProperty(window.location, 'pathname', {\n        value: '/dashboard',\n      });\n\n      const { result } = renderHook(() => useNavigation(mockConfig));\n      \n      expect(result.current.isActive(mockNavigationItems[0])).toBe(true);\n      expect(result.current.isActive(mockNavigationItems[1])).toBe(false);\n    });\n\n    it('should handle navigation with query parameters', () => {\n      const mockHref = jest.fn();\n      Object.defineProperty(window.location, 'href', {\n        set: mockHref,\n      });\n\n      const { result } = renderHook(() => useNavigation(mockConfig));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0], {\n          query: { tab: 'analytics' },\n        });\n      });\n\n      expect(mockHref).toHaveBeenCalledWith('/dashboard?tab=analytics');\n    });\n\n    it('should handle navigation with hash', () => {\n      const mockHref = jest.fn();\n      Object.defineProperty(window.location, 'href', {\n        set: mockHref,\n      });\n\n      const { result } = renderHook(() => useNavigation(mockConfig));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0], {\n          hash: 'section1',\n        });\n      });\n\n      expect(mockHref).toHaveBeenCalledWith('/dashboard#section1');\n    });\n\n    it('should handle replace navigation', () => {\n      const mockReplace = jest.fn();\n      Object.defineProperty(window.location, 'replace', {\n        value: mockReplace,\n      });\n\n      const { result } = renderHook(() => useNavigation(mockConfig));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0], {\n          replace: true,\n        });\n      });\n\n      expect(mockReplace).toHaveBeenCalledWith('/dashboard');\n    });\n\n    it('should handle disabled navigation items', () => {\n      const disabledItem: SidebarNavigationItem = {\n        ...mockNavigationItems[0],\n        disabled: true,\n      };\n      \n      const { result } = renderHook(() => useNavigation(mockConfig));\n      \n      expect(result.current.canNavigate(disabledItem)).toBe(false);\n    });\n  });\n\n  describe('React Router integration', () => {\n    const mockNavigate = jest.fn();\n    const mockLocation = { pathname: '/dashboard' };\n\n    beforeEach(() => {\n      const { useNavigate, useLocation } = require('react-router-dom');\n      useNavigate.mockReturnValue(mockNavigate);\n      useLocation.mockReturnValue(mockLocation);\n    });\n\n    it('should use React Router for navigation', () => {\n      const config: NavigationConfig = {\n        strategy: 'react-router',\n        items: mockNavigationItems,\n      };\n\n      const { result } = renderHook(() => useNavigation(config));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0]);\n      });\n\n      expect(mockNavigate).toHaveBeenCalledWith('/dashboard', {});\n    });\n\n    it('should handle React Router with options', () => {\n      const config: NavigationConfig = {\n        strategy: 'react-router',\n        items: mockNavigationItems,\n      };\n\n      const { result } = renderHook(() => useNavigation(config));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0], {\n          replace: true,\n          state: { from: 'test' },\n        });\n      });\n\n      expect(mockNavigate).toHaveBeenCalledWith('/dashboard', {\n        replace: true,\n        state: { from: 'test' },\n      });\n    });\n  });\n\n  describe('Next.js integration', () => {\n    const mockPush = jest.fn();\n    const mockReplace = jest.fn();\n    const mockRouter = {\n      push: mockPush,\n      replace: mockReplace,\n      asPath: '/dashboard',\n    };\n\n    beforeEach(() => {\n      const { useRouter } = require('next/router');\n      useRouter.mockReturnValue(mockRouter);\n    });\n\n    it('should use Next.js router for navigation', () => {\n      const config: NavigationConfig = {\n        strategy: 'next',\n        items: mockNavigationItems,\n      };\n\n      const { result } = renderHook(() => useNavigation(config));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0]);\n      });\n\n      expect(mockPush).toHaveBeenCalledWith('/dashboard', undefined, {\n        scroll: true,\n      });\n    });\n\n    it('should handle Next.js router with replace', () => {\n      const config: NavigationConfig = {\n        strategy: 'next',\n        items: mockNavigationItems,\n      };\n\n      const { result } = renderHook(() => useNavigation(config));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0], {\n          replace: true,\n        });\n      });\n\n      expect(mockReplace).toHaveBeenCalledWith('/dashboard', undefined, {\n        scroll: true,\n      });\n    });\n  });\n\n  describe('Custom navigation strategy', () => {\n    it('should use custom onNavigate callback', () => {\n      const mockOnNavigate = jest.fn();\n      const config: NavigationConfig = {\n        strategy: 'custom',\n        items: mockNavigationItems,\n        onNavigate: mockOnNavigate,\n      };\n\n      const { result } = renderHook(() => useNavigation(config));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0]);\n      });\n\n      expect(mockOnNavigate).toHaveBeenCalledWith(mockNavigationItems[0]);\n    });\n\n    it('should handle missing onNavigate callback', () => {\n      const mockConsoleWarn = jest.spyOn(console, 'warn').mockImplementation();\n      const config: NavigationConfig = {\n        strategy: 'custom',\n        items: mockNavigationItems,\n      };\n\n      const { result } = renderHook(() => useNavigation(config));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0]);\n      });\n\n      expect(mockConsoleWarn).toHaveBeenCalledWith(\n        expect.stringContaining('Custom navigation strategy requires onNavigate callback')\n      );\n\n      mockConsoleWarn.mockRestore();\n    });\n  });\n\n  describe('Environment-specific configurations', () => {\n    it('should handle development vs production base URLs', () => {\n      // Mock process.env\n      const originalEnv = process.env;\n      process.env = {\n        ...originalEnv,\n        NODE_ENV: 'production',\n        REACT_APP_BASE_URL: '/myapp',\n      };\n\n      const config = autoDetectNavigationConfig();\n      expect(config.baseUrl).toBe('/myapp');\n\n      process.env = originalEnv;\n    });\n\n    it('should handle subdirectory deployments', () => {\n      const config: NavigationConfig = {\n        strategy: 'href',\n        baseUrl: '/subdirectory',\n        items: mockNavigationItems,\n      };\n\n      const { result } = renderHook(() => useNavigation(config));\n      const mockHref = jest.fn();\n      Object.defineProperty(window.location, 'href', {\n        set: mockHref,\n      });\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0]);\n      });\n\n      expect(mockHref).toHaveBeenCalledWith('/subdirectory/dashboard');\n    });\n  });\n\n  describe('useRouterDetection hook', () => {\n    it('should detect available routers', () => {\n      (window as any).__NEXT_DATA__ = {};\n      \n      const { result } = renderHook(() => useRouterDetection());\n      \n      expect(result.current.hasNextRouter).toBe(true);\n      expect(result.current.strategy).toBe('next');\n      expect(result.current.routerInfo.type).toBe('next');\n    });\n  });\n\n  describe('useSimpleNavigation hook', () => {\n    it('should provide simplified navigation API', () => {\n      const { result } = renderHook(() => useSimpleNavigation('href', '/myapp'));\n      \n      expect(result.current.strategy).toBe('href');\n      expect(result.current.baseUrl).toBe('/myapp');\n    });\n\n    it('should auto-detect strategy when not provided', () => {\n      (window as any).__REACT_ROUTER__ = true;\n      \n      const { result } = renderHook(() => useSimpleNavigation());\n      \n      expect(result.current.strategy).toBe('react-router');\n    });\n  });\n\n  describe('Error handling', () => {\n    it('should handle navigation errors gracefully', () => {\n      const mockOnError = jest.fn();\n      const config: NavigationConfig = {\n        strategy: 'react-router',\n        items: mockNavigationItems,\n      };\n\n      // Mock useNavigate to throw an error\n      const { useNavigate } = require('react-router-dom');\n      useNavigate.mockImplementation(() => {\n        throw new Error('Navigation failed');\n      });\n\n      const { result } = renderHook(() => useNavigation(config, { onError: mockOnError }));\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0]);\n      });\n\n      // Should fallback to href navigation\n      // Error handling is tested through console warnings in the implementation\n    });\n\n    it('should validate navigation items', () => {\n      const invalidItem = {\n        id: '',\n        name: '',\n        path: '',\n      } as SidebarNavigationItem;\n\n      const { result } = renderHook(() => useNavigation({\n        strategy: 'href',\n        items: [invalidItem],\n      }));\n      \n      expect(result.current.canNavigate(invalidItem)).toBe(true); // Basic validation passes\n    });\n  });\n\n  describe('Role-based navigation', () => {\n    it('should handle role requirements', () => {\n      const roleBasedConfig: NavigationConfig = {\n        strategy: 'href',\n        items: mockNavigationItems,\n      };\n\n      const { result } = renderHook(() => useNavigation(roleBasedConfig));\n      \n      // Settings item requires admin role\n      const settingsItem = mockNavigationItems.find(item => item.id === 'settings')!;\n      \n      // Without role context, navigation should be allowed (basic implementation)\n      expect(result.current.canNavigate(settingsItem)).toBe(true);\n    });\n  });\n\n  describe('Advanced navigation options', () => {\n    it('should handle complex URL construction', () => {\n      const config: NavigationConfig = {\n        strategy: 'href',\n        baseUrl: '/app',\n        items: mockNavigationItems,\n      };\n\n      const { result } = renderHook(() => useNavigation(config));\n      const mockHref = jest.fn();\n      Object.defineProperty(window.location, 'href', {\n        set: mockHref,\n      });\n      \n      act(() => {\n        result.current.navigate(mockNavigationItems[0], {\n          query: { view: 'detailed', filter: 'active' },\n          hash: 'top',\n        });\n      });\n\n      expect(mockHref).toHaveBeenCalledWith('/app/dashboard?view=detailed&filter=active#top');\n    });\n  });\n});\n\n// Integration tests for specific use cases from the routing solution document\ndescribe('Routing Solution Use Cases', () => {\n  describe('React Router Apps', () => {\n    it('should support the documented React Router configuration', () => {\n      const config = {\n        navigation: {\n          strategy: 'react-router' as const,\n          items: [{ id: '1', name: 'Dashboard', path: '/dashboard' }]\n        }\n      };\n\n      expect(config.navigation.strategy).toBe('react-router');\n      expect(config.navigation.items[0].path).toBe('/dashboard');\n    });\n  });\n\n  describe('Next.js Apps', () => {\n    it('should support the documented Next.js configuration', () => {\n      const config = {\n        navigation: {\n          strategy: 'next' as const,\n          items: [{ id: '1', name: 'Dashboard', path: '/dashboard' }]\n        }\n      };\n\n      expect(config.navigation.strategy).toBe('next');\n      expect(config.navigation.items[0].path).toBe('/dashboard');\n    });\n  });\n\n  describe('Apps in Subdirectories', () => {\n    it('should support the documented subdirectory configuration', () => {\n      const config = {\n        navigation: {\n          strategy: 'href' as const,\n          baseUrl: process.env.NODE_ENV === 'production' ? '/myapp' : '',\n          items: [{ id: '1', name: 'Home', path: '/home' }]\n        }\n      };\n\n      expect(config.navigation.strategy).toBe('href');\n      expect(config.navigation.items[0].path).toBe('/home');\n    });\n  });\n\n  describe('Development vs Production', () => {\n    it('should support automatic environment detection', () => {\n      const strategy = detectNavigationStrategy();\n      expect(['react-router', 'next', 'href'].includes(strategy)).toBe(true);\n    });\n  });\n});